<repomix>This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-01T18:54:57.417Z<directory_structure>hooks/
  use-modal-store.ts
  use-profile-store.ts
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    ui/
      badge.tsx
      button.tsx
      card.tsx
      dialog.tsx
      input.tsx
      label.tsx
      scroll-area.tsx
      slider.tsx
      tabs.tsx
    Dashboard.tsx
    Header.tsx
    LandingPage.tsx
    ModalProvider.tsx
    MovieCard.tsx
    MovieSuggestions.tsx
    Navbar.tsx
    Pagination.tsx
    PersonSuggestions.tsx
    TestPage.tsx
    UserProfile.tsx
  lib/
    utils.ts
  Modal/
    movie-details-modal.tsx
    movie-information-modal.tsx
    sign-in-modal.tsx
    user-profile-modal.tsx
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
types.ts
vite.config.ts</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="hooks/use-modal-store.ts">import { create } from &quot;zustand&quot;;
import { Movie } from &quot;../types&quot;;

export type ModalType = &quot;movieModal&quot;;

interface ModalStore {
  type: ModalType | null;
  data: Movie | null;
  isOpen: boolean;
  onOpen: (type: ModalType, data?: Movie) =&gt; void;
  onClose: () =&gt; void;
}

export const useModal = create&lt;ModalStore&gt;((set) =&gt; ({
  type: null,
  data: null,
  isOpen: false,
  onOpen: (type, data) =&gt; set({ isOpen: true, type, data }),
  onClose: () =&gt; set({ type: null, isOpen: false, data: null }),
}));</file><file path="hooks/use-profile-store.ts">import { create } from &quot;zustand&quot;;
import { persist } from &quot;zustand/middleware&quot;;
import { User } from &quot;../types&quot;;

interface UserStore {
  user: User | null;
  getUser: () =&gt; User | null;
  setUser: (user: User) =&gt; void;
  updateUserCredits: (credits: number) =&gt; void;
}

export const useProfileStore = create&lt;UserStore&gt;()(
  persist(
    (set, get) =&gt; ({
      user: null,
      getUser: () =&gt; get().user,
      setUser: (user) =&gt; set({ user }),
      updateUserCredits: (credits) =&gt;
        set((state) =&gt; {
          const user = state.user;
          if (user) {
            return {
              user: {
                ...user,
                credits,
                name: user.name || &quot;&quot;,
                email: user.email || &quot;&quot;,
              },
            };
          }
          return state;
        }),
    }),
    { name: &quot;profile&quot; },
  ),
);</file><file path="public/vite.svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; aria-hidden=&quot;true&quot; role=&quot;img&quot; class=&quot;iconify iconify--logos&quot; width=&quot;31.88&quot; height=&quot;32&quot; preserveAspectRatio=&quot;xMidYMid meet&quot; viewBox=&quot;0 0 256 257&quot;&gt;&lt;defs&gt;&lt;linearGradient id=&quot;IconifyId1813088fe1fbc01fb466&quot; x1=&quot;-.828%&quot; x2=&quot;57.636%&quot; y1=&quot;7.652%&quot; y2=&quot;78.411%&quot;&gt;&lt;stop offset=&quot;0%&quot; stop-color=&quot;#41D1FF&quot;&gt;&lt;/stop&gt;&lt;stop offset=&quot;100%&quot; stop-color=&quot;#BD34FE&quot;&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;linearGradient id=&quot;IconifyId1813088fe1fbc01fb467&quot; x1=&quot;43.376%&quot; x2=&quot;50.316%&quot; y1=&quot;2.242%&quot; y2=&quot;89.03%&quot;&gt;&lt;stop offset=&quot;0%&quot; stop-color=&quot;#FFEA83&quot;&gt;&lt;/stop&gt;&lt;stop offset=&quot;8.333%&quot; stop-color=&quot;#FFDD35&quot;&gt;&lt;/stop&gt;&lt;stop offset=&quot;100%&quot; stop-color=&quot;#FFA800&quot;&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;/defs&gt;&lt;path fill=&quot;url(#IconifyId1813088fe1fbc01fb466)&quot; d=&quot;M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;url(#IconifyId1813088fe1fbc01fb467)&quot; d=&quot;M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;</file><file path="src/assets/react.svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; aria-hidden=&quot;true&quot; role=&quot;img&quot; class=&quot;iconify iconify--logos&quot; width=&quot;35.93&quot; height=&quot;32&quot; preserveAspectRatio=&quot;xMidYMid meet&quot; viewBox=&quot;0 0 256 228&quot;&gt;&lt;path fill=&quot;#00D8FF&quot; d=&quot;M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;</file><file path="src/components/ui/badge.tsx">import * as React from &quot;react&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const badgeVariants = cva(
  &quot;inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2&quot;,
  {
    variants: {
      variant: {
        default:
          &quot;border-transparent bg-primary text-primary-foreground hover:bg-primary/80&quot;,
        secondary:
          &quot;border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80&quot;,
        destructive:
          &quot;border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80&quot;,
        outline: &quot;text-foreground&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes&lt;HTMLDivElement&gt;,
    VariantProps&lt;typeof badgeVariants&gt; {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    &lt;div className={cn(badgeVariants({ variant }), className)} {...props} /&gt;
  )
}

export { Badge, badgeVariants }</file><file path="src/components/ui/button.tsx">import * as React from &quot;react&quot;
import { Slot } from &quot;@radix-ui/react-slot&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const buttonVariants = cva(
  &quot;inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0&quot;,
  {
    variants: {
      variant: {
        default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,
        destructive:
          &quot;bg-destructive text-destructive-foreground hover:bg-destructive/90&quot;,
        outline:
          &quot;border border-input bg-background hover:bg-accent hover:text-accent-foreground&quot;,
        secondary:
          &quot;bg-secondary text-secondary-foreground hover:bg-secondary/80&quot;,
        ghost: &quot;hover:bg-accent hover:text-accent-foreground&quot;,
        link: &quot;text-primary underline-offset-4 hover:underline&quot;,
      },
      size: {
        default: &quot;h-10 px-4 py-2&quot;,
        sm: &quot;h-9 rounded-md px-3&quot;,
        lg: &quot;h-11 rounded-md px-8&quot;,
        icon: &quot;h-10 w-10&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
      size: &quot;default&quot;,
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;,
    VariantProps&lt;typeof buttonVariants&gt; {
  asChild?: boolean
}

const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;(
  ({ className, variant, size, asChild = false, ...props }, ref) =&gt; {
    const Comp = asChild ? Slot : &quot;button&quot;
    return (
      &lt;Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      /&gt;
    )
  }
)
Button.displayName = &quot;Button&quot;

export { Button, buttonVariants }</file><file path="src/components/ui/card.tsx">import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

const Card = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div
    ref={ref}
    className={cn(
      &quot;rounded-lg border bg-card text-card-foreground shadow-sm&quot;,
      className
    )}
    {...props}
  /&gt;
))
Card.displayName = &quot;Card&quot;

const CardHeader = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div
    ref={ref}
    className={cn(&quot;flex flex-col space-y-1.5 p-6&quot;, className)}
    {...props}
  /&gt;
))
CardHeader.displayName = &quot;CardHeader&quot;

const CardTitle = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div
    ref={ref}
    className={cn(
      &quot;text-2xl font-semibold leading-none tracking-tight&quot;,
      className
    )}
    {...props}
  /&gt;
))
CardTitle.displayName = &quot;CardTitle&quot;

const CardDescription = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div
    ref={ref}
    className={cn(&quot;text-sm text-muted-foreground&quot;, className)}
    {...props}
  /&gt;
))
CardDescription.displayName = &quot;CardDescription&quot;

const CardContent = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div ref={ref} className={cn(&quot;p-6 pt-0&quot;, className)} {...props} /&gt;
))
CardContent.displayName = &quot;CardContent&quot;

const CardFooter = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div
    ref={ref}
    className={cn(&quot;flex items-center p-6 pt-0&quot;, className)}
    {...props}
  /&gt;
))
CardFooter.displayName = &quot;CardFooter&quot;

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }</file><file path="src/components/ui/dialog.tsx">import * as React from &quot;react&quot;
import * as DialogPrimitive from &quot;@radix-ui/react-dialog&quot;
import { X } from &quot;lucide-react&quot;

import { cn } from &quot;@/lib/utils&quot;

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef&lt;
  React.ElementRef&lt;typeof DialogPrimitive.Overlay&gt;,
  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Overlay&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      &quot;fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0&quot;,
      className
    )}
    {...props}
  /&gt;
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef&lt;
  React.ElementRef&lt;typeof DialogPrimitive.Content&gt;,
  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Content&gt;
&gt;(({ className, children, ...props }, ref) =&gt; (
  &lt;DialogPortal&gt;
    &lt;DialogOverlay /&gt;
    &lt;DialogPrimitive.Content
      ref={ref}
      className={cn(
        &quot;fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg&quot;,
        className
      )}
      {...props}
    &gt;
      {children}
      &lt;DialogPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground&quot;&gt;
        &lt;X className=&quot;h-4 w-4&quot; /&gt;
        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;
      &lt;/DialogPrimitive.Close&gt;
    &lt;/DialogPrimitive.Content&gt;
  &lt;/DialogPortal&gt;
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (
  &lt;div
    className={cn(
      &quot;flex flex-col space-y-1.5 text-center sm:text-left&quot;,
      className
    )}
    {...props}
  /&gt;
)
DialogHeader.displayName = &quot;DialogHeader&quot;

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (
  &lt;div
    className={cn(
      &quot;flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2&quot;,
      className
    )}
    {...props}
  /&gt;
)
DialogFooter.displayName = &quot;DialogFooter&quot;

const DialogTitle = React.forwardRef&lt;
  React.ElementRef&lt;typeof DialogPrimitive.Title&gt;,
  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Title&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;DialogPrimitive.Title
    ref={ref}
    className={cn(
      &quot;text-lg font-semibold leading-none tracking-tight&quot;,
      className
    )}
    {...props}
  /&gt;
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef&lt;
  React.ElementRef&lt;typeof DialogPrimitive.Description&gt;,
  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Description&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;DialogPrimitive.Description
    ref={ref}
    className={cn(&quot;text-sm text-muted-foreground&quot;, className)}
    {...props}
  /&gt;
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}</file><file path="src/components/ui/input.tsx">import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

const Input = React.forwardRef&lt;HTMLInputElement, React.ComponentProps&lt;&quot;input&quot;&gt;&gt;(
  ({ className, type, ...props }, ref) =&gt; {
    return (
      &lt;input
        type={type}
        className={cn(
          &quot;flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm&quot;,
          className
        )}
        ref={ref}
        {...props}
      /&gt;
    )
  }
)
Input.displayName = &quot;Input&quot;

export { Input }</file><file path="src/components/ui/label.tsx">import * as React from &quot;react&quot;
import * as LabelPrimitive from &quot;@radix-ui/react-label&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const labelVariants = cva(
  &quot;text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70&quot;
)

const Label = React.forwardRef&lt;
  React.ElementRef&lt;typeof LabelPrimitive.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof LabelPrimitive.Root&gt; &amp;
    VariantProps&lt;typeof labelVariants&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  /&gt;
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }</file><file path="src/components/ui/scroll-area.tsx">import * as React from &quot;react&quot;
import * as ScrollAreaPrimitive from &quot;@radix-ui/react-scroll-area&quot;

import { cn } from &quot;@/lib/utils&quot;

const ScrollArea = React.forwardRef&lt;
  React.ElementRef&lt;typeof ScrollAreaPrimitive.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ScrollAreaPrimitive.Root&gt;
&gt;(({ className, children, ...props }, ref) =&gt; (
  &lt;ScrollAreaPrimitive.Root
    ref={ref}
    className={cn(&quot;relative overflow-hidden&quot;, className)}
    {...props}
  &gt;
    &lt;ScrollAreaPrimitive.Viewport className=&quot;h-full w-full rounded-[inherit]&quot;&gt;
      {children}
    &lt;/ScrollAreaPrimitive.Viewport&gt;
    &lt;ScrollBar /&gt;
    &lt;ScrollAreaPrimitive.Corner /&gt;
  &lt;/ScrollAreaPrimitive.Root&gt;
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef&lt;
  React.ElementRef&lt;typeof ScrollAreaPrimitive.ScrollAreaScrollbar&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ScrollAreaPrimitive.ScrollAreaScrollbar&gt;
&gt;(({ className, orientation = &quot;vertical&quot;, ...props }, ref) =&gt; (
  &lt;ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      &quot;flex touch-none select-none transition-colors&quot;,
      orientation === &quot;vertical&quot; &amp;&amp;
        &quot;h-full w-2.5 border-l border-l-transparent p-[1px]&quot;,
      orientation === &quot;horizontal&quot; &amp;&amp;
        &quot;h-2.5 flex-col border-t border-t-transparent p-[1px]&quot;,
      className
    )}
    {...props}
  &gt;
    &lt;ScrollAreaPrimitive.ScrollAreaThumb className=&quot;relative flex-1 rounded-full bg-border&quot; /&gt;
  &lt;/ScrollAreaPrimitive.ScrollAreaScrollbar&gt;
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }</file><file path="src/components/ui/slider.tsx">import * as React from &quot;react&quot;
import * as SliderPrimitive from &quot;@radix-ui/react-slider&quot;

import { cn } from &quot;@/lib/utils&quot;

const Slider = React.forwardRef&lt;
  React.ElementRef&lt;typeof SliderPrimitive.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof SliderPrimitive.Root&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;SliderPrimitive.Root
    ref={ref}
    className={cn(
      &quot;relative flex w-full touch-none select-none items-center&quot;,
      className
    )}
    {...props}
  &gt;
    &lt;SliderPrimitive.Track className=&quot;relative h-2 w-full grow overflow-hidden rounded-full bg-secondary&quot;&gt;
      &lt;SliderPrimitive.Range className=&quot;absolute h-full bg-primary&quot; /&gt;
    &lt;/SliderPrimitive.Track&gt;
    &lt;SliderPrimitive.Thumb className=&quot;block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50&quot; /&gt;
  &lt;/SliderPrimitive.Root&gt;
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }</file><file path="src/components/ui/tabs.tsx">import * as React from &quot;react&quot;
import * as TabsPrimitive from &quot;@radix-ui/react-tabs&quot;

import { cn } from &quot;@/lib/utils&quot;

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef&lt;
  React.ElementRef&lt;typeof TabsPrimitive.List&gt;,
  React.ComponentPropsWithoutRef&lt;typeof TabsPrimitive.List&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;TabsPrimitive.List
    ref={ref}
    className={cn(
      &quot;inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground&quot;,
      className
    )}
    {...props}
  /&gt;
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef&lt;
  React.ElementRef&lt;typeof TabsPrimitive.Trigger&gt;,
  React.ComponentPropsWithoutRef&lt;typeof TabsPrimitive.Trigger&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      &quot;inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm&quot;,
      className
    )}
    {...props}
  /&gt;
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef&lt;
  React.ElementRef&lt;typeof TabsPrimitive.Content&gt;,
  React.ComponentPropsWithoutRef&lt;typeof TabsPrimitive.Content&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;TabsPrimitive.Content
    ref={ref}
    className={cn(
      &quot;mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2&quot;,
      className
    )}
    {...props}
  /&gt;
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }</file><file path="src/components/Dashboard.tsx">import type React from &quot;react&quot;;
import { debounce } from &quot;lodash&quot;;
import axios from &quot;axios&quot;;
import { useEffect, useState, useCallback } from &quot;react&quot;;
import { useNavigate } from &quot;react-router-dom&quot;;
import MovieSuggestions from &quot;./MovieSuggestions&quot;;
import PersonSuggestions from &quot;./PersonSuggestions&quot;;
import { Actor, Movie, PersonSuggestion } from &quot;../../types&quot;;
import { MovieSuggestion } from &quot;../../types&quot;;
import { Button } from &quot;./ui/button&quot;;
import { Input } from &quot;./ui/input&quot;;
import { Label } from &quot;./ui/label&quot;;
import { Slider } from &quot;./ui/slider&quot;;
import Header from &quot;./Header&quot;;
import MovieCard from &quot;./MovieCard&quot;;
import { useProfileStore } from &quot;../../hooks/use-profile-store&quot;;
import { Card, CardContent, CardHeader, CardTitle } from &quot;./ui/card&quot;;
import { FontAwesomeIcon } from &quot;@fortawesome/react-fontawesome&quot;;
import { faRobot } from &quot;@fortawesome/free-solid-svg-icons&quot;;
import { useModal } from &quot;../../hooks/use-modal-store&quot;;
import { Pagination } from &quot;../components/Pagination&quot;;

const Dashboard: React.FC = () =&gt; {
  const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;
  const { user } = useProfileStore();
  const navigate = useNavigate();
  const { onOpen } = useModal();

  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(&quot;&quot;);
  const [suggestions, setSuggestions] = useState&lt;MovieSuggestion[]&gt;([]);
  const [yearRange, setYearRange] = useState([1900, 2025]);
  const [durationRange, setDurationRange] = useState([0, 240]);
  const [selectedGenres, setSelectedGenres] = useState&lt;string[]&gt;([]);
  const [excludedGenres, setExcludedGenres] = useState&lt;string[]&gt;([]);
  const [actor, setActor] = useState&lt;PersonSuggestion | null&gt;(null);
  const [director, setDirector] = useState&lt;PersonSuggestion | null&gt;(null);
  const [movies, setMovies] = useState&lt;Movie[]&gt;([]);
  const [genres, setGenres] = useState&lt;string[]&gt;([]);
  const [searchPerformed, setSearchPerformed] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(12);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);

  const [actorSearchTerm, setActorSearchTerm] = useState(&quot;&quot;);
  const [debouncedActorSearchTerm, setDebouncedActorSearchTerm] = useState(&quot;&quot;);
  const [actorSuggestions, setActorSuggestions] = useState&lt;PersonSuggestion[]&gt;(
    [],
  );

  const [directorSearchTerm, setDirectorSearchTerm] = useState(&quot;&quot;);
  const [debouncedDirectorSearchTerm, setDebouncedDirectorSearchTerm] =
    useState(&quot;&quot;);
  const [directorSuggestions, setDirectorSuggestions] = useState&lt;
    PersonSuggestion[]
  &gt;([]);

  useEffect(() =&gt; {
    if (!user) {
      navigate(&quot;/&quot;);
    }
    fetchGenres();
  }, [user, navigate]);

  useEffect(() =&gt; {
    if (!debouncedSearchTerm) {
      return;
    }
    getSuggestions();
  }, [debouncedSearchTerm]);

  useEffect(() =&gt; {
    if (!debouncedActorSearchTerm) {
      setActorSuggestions([]);
      return;
    }
    getActorSuggestions();
  }, [debouncedActorSearchTerm]);

  useEffect(() =&gt; {
    if (!debouncedDirectorSearchTerm) {
      setDirectorSuggestions([]);
      return;
    }
    getDirectorSuggestions();
  }, [debouncedDirectorSearchTerm]);

  const searchMovies = async (page: number = currentPage) =&gt; {
    setSearchPerformed(true);

    const criterias = {
      GENRES_INCLUS: selectedGenres,
      GENRES_EXCLUS: excludedGenres,
      ANNEE: yearRange[1],
      DUREE_MIN: durationRange[0] === 0 ? 1 : durationRange[0],
      DUREE_MAX: durationRange[1],
      ACTEURS: actor ? [actor.name] : [],
      SCENARISTES: director ? [director.name] : [],
      page: page,
      limit: itemsPerPage,
    };

    console.log(&quot;Actor is:&quot;, actor);
    console.log(&quot;Search criterias:&quot;, criterias);

    try {
      const response = await axios.post(`${BACKEND_URL}/movies`, criterias, {
        headers: {
          &quot;Content-Type&quot;: &quot;application/json&quot;,
        },
      });
      setMovies(response.data.items);
      setTotalPages(response.data.total_pages);
      setTotalItems(response.data.total);
      setCurrentPage(response.data.page);
    } catch (error: any) {
      console.error(error);
    }
  };

  const fetchGenres = async () =&gt; {
    try {
      const response = await axios.get(`${BACKEND_URL}/movies/all-genres`);
      setGenres(response.data);
    } catch (error: any) {
      console.error(error);
    }
  };

  const getSuggestions = async () =&gt; {
    try {
      const token = localStorage.getItem(&quot;authToken&quot;);
      const response = await axios.get(
        `${BACKEND_URL}/movies/suggestions/${debouncedSearchTerm}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );

      setSuggestions(response.data);
    } catch (error: any) {
      console.error(error);
    }
  };

  const getActorSuggestions = async () =&gt; {
    try {
      const token = localStorage.getItem(&quot;authToken&quot;);
      const response = await axios.get(
        `${BACKEND_URL}/movies/actor/suggestion/${debouncedActorSearchTerm}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );
      setActorSuggestions(response.data.suggestions);
      console.log(&quot;Actor suggestions:&quot;, response.data.suggestions);
    } catch (error) {
      console.error(&quot;Error fetching actor suggestions:&quot;, error);
    }
  };

  const getDirectorSuggestions = async () =&gt; {
    try {
      const token = localStorage.getItem(&quot;authToken&quot;);
      const response = await axios.get(
        `${BACKEND_URL}/movies/director/suggestion/${debouncedDirectorSearchTerm}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );
      setDirectorSuggestions(response.data.suggestions);
      console.log(&quot;Director suggestions:&quot;, response.data.suggestions);
    } catch (error) {
      console.error(&quot;Error fetching director suggestions:&quot;, error);
    }
  };

  useEffect(() =&gt; {
    debounceSetSearch(searchTerm);
  }, [searchTerm]);

  useEffect(() =&gt; {
    debounceActorSearch(actorSearchTerm);
  }, [actorSearchTerm]);

  useEffect(() =&gt; {
    debounceDirectorSearch(directorSearchTerm);
  }, [directorSearchTerm]);

  const debounceSetSearch = useCallback(
    debounce((value: string) =&gt; {
      setDebouncedSearchTerm(value);
    }, 300),
    [],
  );

  const debounceActorSearch = useCallback(
    debounce((value: string) =&gt; {
      setDebouncedActorSearchTerm(value);
    }, 300),
    [],
  );

  const debounceDirectorSearch = useCallback(
    debounce((value: string) =&gt; {
      setDebouncedDirectorSearchTerm(value);
    }, 300),
    [],
  );

  const resetFilters = () =&gt; {
    setMovies([]);
    setSearchTerm(&quot;&quot;);
    setDebouncedSearchTerm(&quot;&quot;);
    setSuggestions([]);
    setYearRange([1900, 2025]);
    setDurationRange([0, 240]);
    setSelectedGenres([]);
    setExcludedGenres([]);
    setActor(null);
    setDirector(null);
    setActorSearchTerm(&quot;&quot;);
    setDirectorSearchTerm(&quot;&quot;);
    setActorSuggestions([]);
    setDirectorSuggestions([]);
    setSearchPerformed(false);
    fetchGenres();
  };

  const handleSearch = (e: React.FormEvent) =&gt; {
    e.preventDefault();
    searchMovies();
  };

  const handleYearRangeChange = (value: number[]) =&gt; {
    setYearRange(value);
  };

  const handleDurationRangeChange = (value: number[]) =&gt; {
    setDurationRange(value);
  };

  const toggleGenre = (genre: string, list: &quot;include&quot; | &quot;exclude&quot;) =&gt; {
    if (list === &quot;include&quot;) {
      setSelectedGenres((prev) =&gt;
        prev.includes(genre)
          ? prev.filter((g) =&gt; g !== genre)
          : [...prev, genre],
      );
    } else {
      setExcludedGenres((prev) =&gt;
        prev.includes(genre)
          ? prev.filter((g) =&gt; g !== genre)
          : [...prev, genre],
      );
    }
  };

  const goToPage = (page: number) =&gt; {
    if (page &gt;= 1 &amp;&amp; page &lt;= totalPages) {
      setCurrentPage(page);
      searchMovies(page);
    }
  };

  const onClickSelection = async (movieId: number) =&gt; {
    console.log(&quot;trying to get movie, id:&quot;, movieId);
    setSuggestions([]);
    try {
      const response = await axios.get(
        `${BACKEND_URL}/movies/movie/${movieId}`,
      );
      const movie: Movie = response.data;
      onOpen(&quot;movieModal&quot;, movie as Movie);
      setSearchTerm(&quot;&quot;);
    } catch (error: any) {
      console.error(error);
    }
  };

  useEffect(() =&gt; {
    searchMovies();
  }, [actor]);

  const handleActorSelect = (person: PersonSuggestion) =&gt; {
    setActor(person);
    setActorSuggestions([]);
    setActorSearchTerm(&quot;&quot;);
  };

  const handleDirectorSelect = (person: PersonSuggestion) =&gt; {
    setDirector(person);
    setDirectorSuggestions([]);
    //setDirectorSearchTerm(&quot;&quot;);
  };

  return (
    &lt;div className=&quot;bg-background min-h-screen w-screen&quot;&gt;
      &lt;Header title=&quot;Dashboard&quot; /&gt;
      &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;
        &lt;div className=&quot;flex gap-8&quot;&gt;
          &lt;Card className=&quot;basis-3/4&quot;&gt;
            &lt;CardHeader&gt;
              &lt;CardTitle&gt;Advanced Search&lt;/CardTitle&gt;
            &lt;/CardHeader&gt;
            &lt;CardContent&gt;
              &lt;form onSubmit={handleSearch} className=&quot;space-y-6&quot;&gt;
                &lt;div className=&quot;flex gap-2 relative&quot;&gt;
                  {&quot; &quot;}
                  &lt;Input
                    placeholder=&quot;Search movies...&quot;
                    value={searchTerm}
                    onChange={(e) =&gt; setSearchTerm(e.target.value)}
                    className=&quot;flex-1&quot;
                  /&gt;
                  {debouncedSearchTerm.length !== 0 &amp;&amp; (
                    &lt;MovieSuggestions
                      suggestions={suggestions.map((s: MovieSuggestion) =&gt; s)}
                      onSelect={(suggestion) =&gt; {
                        onClickSelection(suggestion.ID);
                      }}
                      visible={suggestions.length &gt; 0}
                    /&gt;
                  )}
                &lt;/div&gt;

                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;
                    Year Range ({yearRange[0]} - {yearRange[1]})
                  &lt;/Label&gt;
                  &lt;Slider
                    min={1900}
                    max={2025}
                    step={1}
                    value={yearRange}
                    onValueChange={handleYearRangeChange}
                    className=&quot;my-4&quot;
                  /&gt;
                &lt;/div&gt;

                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;
                    Duration ({durationRange[0]} - {durationRange[1]} minutes)
                  &lt;/Label&gt;
                  &lt;Slider
                    min={0}
                    max={240}
                    step={5}
                    value={durationRange}
                    onValueChange={handleDurationRangeChange}
                    className=&quot;my-4&quot;
                  /&gt;
                &lt;/div&gt;

                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;Include Genres&lt;/Label&gt;
                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;
                    {genres.map((genre) =&gt; (
                      &lt;Button
                        key={genre}
                        variant={
                          selectedGenres.includes(genre) ? &quot;default&quot; : &quot;outline&quot;
                        }
                        size=&quot;sm&quot;
                        onClick={() =&gt; toggleGenre(genre, &quot;include&quot;)}
                        type=&quot;button&quot;
                      &gt;
                        {genre}
                      &lt;/Button&gt;
                    ))}
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;Exclude Genres&lt;/Label&gt;
                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;
                    {genres.map((genre) =&gt; (
                      &lt;Button
                        key={genre}
                        variant={
                          excludedGenres.includes(genre) ? &quot;default&quot; : &quot;outline&quot;
                        }
                        size=&quot;sm&quot;
                        onClick={() =&gt; toggleGenre(genre, &quot;exclude&quot;)}
                        type=&quot;button&quot;
                      &gt;
                        {genre}
                      &lt;/Button&gt;
                    ))}
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div className=&quot;justify-end pt-3 flex gap-4&quot;&gt;
                  &lt;Button type=&quot;submit&quot;&gt;Search&lt;/Button&gt;
                  &lt;Button
                    type=&quot;button&quot;
                    variant=&quot;outline&quot;
                    onClick={resetFilters}
                  &gt;
                    Reset
                  &lt;/Button&gt;
                &lt;/div&gt;
              &lt;/form&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;

          &lt;Card className=&quot;basis-1/4&quot;&gt;
            &lt;CardHeader&gt;
              &lt;CardTitle&gt;People Search&lt;/CardTitle&gt;
            &lt;/CardHeader&gt;
            &lt;CardContent&gt;
              &lt;div className=&quot;space-y-4&quot;&gt;
                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;Actor&lt;/Label&gt;
                  &lt;div className=&quot;relative&quot;&gt;
                    &lt;Input
                      placeholder=&quot;Enter actor name...&quot;
                      value={actorSearchTerm}
                      onChange={(e) =&gt; setActorSearchTerm(e.target.value)}
                      className=&quot;flex-1&quot;
                    /&gt;
                    {debouncedActorSearchTerm.length !== 0 &amp;&amp; (
                      &lt;PersonSuggestions
                        suggestions={actorSuggestions.map(
                          (s: PersonSuggestion) =&gt; s,
                        )}
                        onSelect={handleActorSelect}
                        visible={actorSuggestions.length &gt; 0}
                      /&gt;
                    )}
                  &lt;/div&gt;
                  {actor &amp;&amp; (
                    &lt;div className=&quot;mt-2&quot;&gt;
                      &lt;Label&gt;Selected: {actor.name}&lt;/Label&gt;
                    &lt;/div&gt;
                  )}
                &lt;/div&gt;

                &lt;div className=&quot;space-y-2&quot;&gt;
                  &lt;Label&gt;Director&lt;/Label&gt;
                  &lt;div className=&quot;relative&quot;&gt;
                    &lt;Input
                      placeholder=&quot;Enter director name...&quot;
                      value={directorSearchTerm}
                      onChange={(e) =&gt; setDirectorSearchTerm(e.target.value)}
                      className=&quot;flex-1&quot;
                    /&gt;
                    {debouncedDirectorSearchTerm.length !== 0 &amp;&amp; (
                      &lt;PersonSuggestions
                        suggestions={directorSuggestions.map(
                          (s: PersonSuggestion) =&gt; s,
                        )}
                        onSelect={handleDirectorSelect}
                        visible={directorSuggestions.length &gt; 0}
                      /&gt;
                    )}
                  &lt;/div&gt;
                  {director &amp;&amp; (
                    &lt;div className=&quot;mt-2&quot;&gt;
                      &lt;Label&gt;Selected: {director}&lt;/Label&gt;
                    &lt;/div&gt;
                  )}
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        &lt;/div&gt;

        &lt;div className=&quot;mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;
          {movies.length &gt; 0
            ? movies.map((movie) =&gt; &lt;MovieCard key={movie.ID} movie={movie} /&gt;)
            : searchPerformed &amp;&amp; (
                &lt;div className=&quot;col-span-full text-center text-gray-500 flex flex-col items-center&quot;&gt;
                  &lt;FontAwesomeIcon icon={faRobot} size=&quot;3x&quot; className=&quot;mb-4&quot; /&gt;
                  &lt;span&gt;
                    Il n&apos;y a pas de films correspondant aux filtres de
                    recherche. Oups!
                  &lt;/span&gt;
                &lt;/div&gt;
              )}
        &lt;/div&gt;

        {movies.length &gt; 0 &amp;&amp; totalPages &gt; 1 &amp;&amp; (
          &lt;Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            maxVisiblePages={5}
            goToPage={goToPage}
          /&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default Dashboard;</file><file path="src/components/Header.tsx">import type React from &quot;react&quot;;
import { Button } from &quot;./ui/button&quot;;
import { User, Film } from &quot;lucide-react&quot;;
import { useNavigate } from &quot;react-router-dom&quot;;

type HeaderProps = {
  title: string;
};

const Header: React.FC&lt;HeaderProps&gt; = ({ title }) =&gt; {
  const navigate = useNavigate();

  const handleDashboardClick = () =&gt; {
    navigate(&quot;/dashboard&quot;);
  };

  return (
    &lt;header className=&quot;border-b bg-card&quot;&gt;
      &lt;div className=&quot;container mx-auto px-4 py-4&quot;&gt;
        &lt;div className=&quot;flex justify-between items-center&quot;&gt;
          &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;{title}&lt;/h1&gt;
          &lt;div className=&quot;flex-1 flex justify-center&quot;&gt;
            &lt;Button
              variant=&quot;outline&quot;
              className=&quot;flex items-center gap-2 hover:text-primary text-purple-400/90&quot;
              onClick={handleDashboardClick}
            &gt;
              &lt;Film className=&quot;h-5 w-5&quot; /&gt;
              &lt;span className=&quot;text-xl font-semibold&quot;&gt;iTunes&lt;/span&gt;
            &lt;/Button&gt;
          &lt;/div&gt;
          &lt;div className=&quot;flex items-center gap-4&quot;&gt;
            &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={() =&gt; navigate(&quot;/profile&quot;)}&gt;
              &lt;User className=&quot;w-4 h-4 mr-2&quot; /&gt;
              Profile
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/header&gt;
  );
};

export default Header;</file><file path="src/components/LandingPage.tsx">import { useState } from &quot;react&quot;;
import { Button } from &quot;./ui/button&quot;;
import { Film } from &quot;lucide-react&quot;;
import { Input } from &quot;./ui/input&quot;;
import axios from &quot;axios&quot;;
import { useNavigate } from &quot;react-router-dom&quot;;
import SignInModal from &quot;./../Modal/sign-in-modal&quot;;
import { useProfileStore } from &quot;../../hooks/use-profile-store&quot;;

const LandingPage = () =&gt; {
  const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;
  const navigate = useNavigate();
  const { setUser } = useProfileStore();

  const [showModal, setShowModal] = useState(false);
  const [error, setError] = useState&lt;string&gt;(&quot;&quot;);

  const fecthUserInformation = async () =&gt; {
    try {
      const token = localStorage.getItem(&quot;authToken&quot;);
      const response = await axios.get(`${BACKEND_URL}/users/myaccount`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setUser(response.data);

    } catch (error: any) {
      console.error(error);
    }
  };

  const handleSearchClick = (e: React.FormEvent) =&gt; {
    e.preventDefault();
    setShowModal(true);
  };

  const handleSignInClick = async (formData: {
    courriel: string;
    mot_de_passe: string;
  }) =&gt; {
    try {
      const response = await axios.post(`${BACKEND_URL}/auth/login`, formData, {
        headers: {
          &quot;Content-Type&quot;: &quot;application/json&quot;,
        },
      });

      const token = response.data.token;
      localStorage.setItem(&quot;authToken&quot;, token);

      await fecthUserInformation();

      navigate(&quot;/dashboard&quot;);
      setShowModal(false);
    } catch (error: any) {
      if (error.response.status === 401) {
        setError(&quot;Email ou mot de passe incorrect&quot;);
      } else {
        console.error(error);
      }
    }
  };

  return (
    &lt;div className=&quot;w-screen flex flex-col items-center h-screen justify-center&quot;&gt;
      &lt;a
        className=&quot;flex items-center justify-center fixed top-0 pt-10&quot;
        href=&quot;#&quot;
      &gt;
        &lt;Film className=&quot;h-6 w-6&quot; /&gt;
        &lt;span className=&quot;text-2xl font-bold&quot;&gt;iTunes&lt;/span&gt;
      &lt;/a&gt;
      &lt;div className=&quot;flex flex-col items-center space-y-4 text-center mt-20 pb-32&quot;&gt;
        &lt;div className=&quot;space-y-2&quot;&gt;
          &lt;h1 className=&quot;text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none&quot;&gt;
            Trouvez Votre Film Préféré
          &lt;/h1&gt;
          &lt;p className=&quot;max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400&quot;&gt;
            Explorez et découvrez des milliers de films. La soirée cinéma
            parfaite est à portée de clic.
          &lt;/p&gt;
        &lt;/div&gt;
        &lt;div className=&quot;w-full max-w-sm space-y-2&quot;&gt;
          &lt;form className=&quot;flex space-x-2&quot; onSubmit={handleSearchClick}&gt;
            &lt;Input
              className=&quot;max-w-lg flex-1&quot;
              placeholder=&quot;Recherchez un film...&quot;
              type=&quot;text&quot;
            /&gt;
            &lt;Button type=&quot;submit&quot;&gt;Rechercher&lt;/Button&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;SignInModal
        isOpen={showModal}
        onClose={() =&gt; setShowModal(false)}
        onSignIn={handleSignInClick}
        error={error}
      /&gt;
    &lt;/div&gt;
  );
};

export default LandingPage;</file><file path="src/components/ModalProvider.tsx">import MovieDetailsModal from &quot;../Modal/movie-details-modal&quot;;
const ModalProvider = () =&gt; {
  return (
    &lt;&gt;
      &lt;MovieDetailsModal /&gt;
    &lt;/&gt;
    
  );
};

export default ModalProvider;</file><file path="src/components/MovieCard.tsx">import type React from &quot;react&quot;;
import { Button } from &quot;./ui/button&quot;;
import { Card, CardContent } from &quot;./ui/card&quot;;
import { MovieSuggestion, Movie } from &quot;../../types&quot;;
import { useModal } from &quot;../../hooks/use-modal-store&quot;;
import axios from &quot;axios&quot;;
import { useState } from &quot;react&quot;;
import { Loader2 } from &quot;lucide-react&quot;;

interface MovieCardProps {
  movie: MovieSuggestion;
}

const MovieCard: React.FC&lt;MovieCardProps&gt; = ({ movie }) =&gt; {
  const { onOpen } = useModal();
  const [loading, setLoading] = useState(false);
  const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;

  const onCardClick = async () =&gt; {
    try {
      setLoading(true);
      console.log(&quot;Fetching complete details for movie:&quot;, movie.ID);
      
      const response = await axios.get(`${BACKEND_URL}/movies/movie/${movie.ID}`);
      const fullMovieData: Movie = response.data;
      
      onOpen(&quot;movieModal&quot;, fullMovieData);
    } catch (error) {
      console.error(&quot;Error fetching movie details:&quot;, error);
      onOpen(&quot;movieModal&quot;, movie as unknown as Movie);
    } finally {
      setLoading(false);
    }
  };

  return (
    &lt;Card key={movie.ID} className=&quot;overflow-hidden&quot;&gt;
      &lt;CardContent className=&quot;p-0&quot;&gt;
        &lt;div className=&quot;aspect-[2/3] relative&quot;&gt;
          &lt;Button 
            onClick={onCardClick} 
            disabled={loading}
            className=&quot;w-full h-full p-0 m-0 rounded-none&quot;
          &gt;
            {loading ? (
              &lt;div className=&quot;absolute inset-0 flex items-center justify-center bg-black/50&quot;&gt;
                &lt;Loader2 className=&quot;w-8 h-8 animate-spin text-white&quot; /&gt;
              &lt;/div&gt;
            ) : null}
            &lt;img
              src={movie.POSTER_URL || &quot;/placeholder.svg&quot;}
              alt={movie.TITRE}
              className=&quot;object-cover absolute inset-0 w-full h-full&quot;
            /&gt;
          &lt;/Button&gt;
        &lt;/div&gt;
        &lt;div className=&quot;p-4 space-y-4&quot;&gt;
          &lt;div&gt;
            &lt;h3 className=&quot;font-semibold text-lg leading-tight&quot;&gt;
              {movie.TITRE}
            &lt;/h3&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              {movie.ANNEE} • {movie.DUREE} min
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
};

export default MovieCard;</file><file path="src/components/MovieSuggestions.tsx">import { Card } from &quot;../components/ui/card&quot;;
import { MovieSuggestion } from &quot;../../types&quot;;

type MovieSuggestionsProps = {
  suggestions: MovieSuggestion[];
  onSelect: (suggestion: MovieSuggestion) =&gt; void;
  visible: boolean;
};

const MovieSuggestions = ({
  suggestions,
  onSelect,
  visible,
}: MovieSuggestionsProps) =&gt; {
  if (!visible || suggestions.length === 0) return null;

  return (
    &lt;Card className=&quot;absolute top-full left-0 right-0 mt-1 max-h-60 overflow-y-auto z-50 bg-white border border-input&quot;&gt;
      &lt;div className=&quot;w-full&quot;&gt;
        {suggestions.map((suggestion, index) =&gt; (
          &lt;button
            key={index}
            onClick={() =&gt; onSelect(suggestion)}
            className=&quot;w-full text-left px-3 py-2 hover:bg-accent hover:text-accent-foreground rounded-sm text-sm bg-white text-black&quot;
          &gt;
            {suggestion.TITRE}
          &lt;/button&gt;
        ))}
      &lt;/div&gt;
    &lt;/Card&gt;
  );
};

export default MovieSuggestions;</file><file path="src/components/Navbar.tsx">import { Film } from &quot;lucide-react&quot;;

const NarBar = () =&gt; {
  return (
    &lt;header className=&quot;fixed top-0 px-4 lg:px-6 h-14 flex items-center w-screen m-2 justify-center&quot;&gt;
      &lt;a className=&quot;flex items-center justify-center&quot; href=&quot;#&quot;&gt;
        &lt;Film className=&quot;h-6 w-6&quot; /&gt;
        &lt;span className=&quot;ml-2 text-2xl font-bold&quot;&gt;iTunes&lt;/span&gt;
      &lt;/a&gt;
    &lt;/header&gt;
  );
};

export default NarBar;</file><file path="src/components/Pagination.tsx">import { Button } from &apos;../components/ui/button&apos;;

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  maxVisiblePages: number;
  goToPage: (page: number) =&gt; void;
}

export const Pagination: React.FC&lt;PaginationProps&gt; = ({
  currentPage,
  totalPages,
  maxVisiblePages = 5,
  goToPage
}) =&gt; {
  const pageNumbers = [];
  
  let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
  
  if (endPage - startPage + 1 &lt; maxVisiblePages) {
    startPage = Math.max(1, endPage - maxVisiblePages + 1);
  }

  for (let i = startPage; i &lt;= endPage; i++) {
    pageNumbers.push(i);
  }

  return (
    &lt;div className=&quot;flex items-center justify-center space-x-2 mt-6&quot;&gt;
      &lt;Button 
        variant=&quot;outline&quot; 
        onClick={() =&gt; goToPage(currentPage - 1)}
        disabled={currentPage === 1}
      &gt;
        Previous
      &lt;/Button&gt;
      
      {startPage &gt; 1 &amp;&amp; (
        &lt;&gt;
          &lt;Button variant=&quot;outline&quot; onClick={() =&gt; goToPage(1)}&gt;1&lt;/Button&gt;
          {startPage &gt; 2 &amp;&amp; &lt;span className=&quot;px-2&quot;&gt;...&lt;/span&gt;}
        &lt;/&gt;
      )}
      
      {pageNumbers.map(number =&gt; (
        &lt;Button
          key={number}
          variant={currentPage === number ? &quot;default&quot; : &quot;outline&quot;}
          onClick={() =&gt; goToPage(number)}
        &gt;
          {number}
        &lt;/Button&gt;
      ))}
      
      {endPage &lt; totalPages &amp;&amp; (
        &lt;&gt;
          {endPage &lt; totalPages - 1 &amp;&amp; &lt;span className=&quot;px-2&quot;&gt;...&lt;/span&gt;}
          &lt;Button variant=&quot;outline&quot; onClick={() =&gt; goToPage(totalPages)}&gt;
            {totalPages}
          &lt;/Button&gt;
        &lt;/&gt;
      )}
      
      &lt;Button 
        variant=&quot;outline&quot; 
        onClick={() =&gt; goToPage(currentPage + 1)}
        disabled={currentPage === totalPages}
      &gt;
        Next
      &lt;/Button&gt;
    &lt;/div&gt;
  );
};</file><file path="src/components/PersonSuggestions.tsx">import { Card } from &quot;../components/ui/card&quot;;
import { PersonSuggestion } from &quot;../../types&quot;;

export type PersonSuggestionsProps = {
  suggestions: PersonSuggestion[];
  onSelect: (suggestion: PersonSuggestion) =&gt; void;
  visible: boolean;
};

const PersonSuggestions = ({
  suggestions,
  onSelect,
  visible,
}: PersonSuggestionsProps) =&gt; {
  if (!visible || suggestions.length === 0) return null;

  return (
    &lt;Card className=&quot;absolute top-full left-0 right-0 mt-1 max-h-60 overflow-y-auto z-50 bg-white border border-input&quot;&gt;
      &lt;div className=&quot;w-full&quot;&gt;
        {suggestions.map((suggestion) =&gt; (
          &lt;button
            key={suggestion.id}
            onClick={() =&gt; onSelect(suggestion)}
            className=&quot;w-full text-left px-3 py-2 hover:bg-accent hover:text-accent-foreground rounded-sm text-sm bg-white text-black&quot;
          &gt;
            {suggestion.name}
          &lt;/button&gt;
        ))}
      &lt;/div&gt;
    &lt;/Card&gt;
  );
};

export default PersonSuggestions;</file><file path="src/components/TestPage.tsx">import {
  Dialog,
  DialogContent,
} from &quot;../components/ui/dialog&quot;;
import { ScrollArea } from &quot;../components/ui/scroll-area&quot;;
import { Button } from &quot;../components/ui/button&quot;;
import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;../components/ui/tabs&quot;;
import {
  Clock,
  Calendar,
  Globe,
  Play,
} from &quot;lucide-react&quot;;

// Define the new Movie type
export type Movie = {
  ID: number;
  TITRE: string;
  RESUME: string;
  ANNEE: number;
  DUREE: number;
  LANGUE: string;
  ID_REALISATEUR: number;
  POSTER_URL: string;
};

// Mock data for testing
const mockMovieData: Movie = {
  ID: 1,
  TITRE: &quot;Inception&quot;,
  RESUME: &quot;A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.&quot;,
  ANNEE: 2010,
  DUREE: 148,
  LANGUE: &quot;English&quot;,
  ID_REALISATEUR: 1,
  POSTER_URL: &quot;https://example.com/inception-poster.jpg&quot;,
};

const TestPage = () =&gt; {

  const handleWatchTrailer = () =&gt; {
    console.log(&apos;Opening trailer for:&apos;, mockMovieData.TITRE);
  };

  return (
    &lt;div className=&quot;p-4&quot;&gt;
      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Test Page&lt;/h1&gt;
      &lt;Dialog open={true} onOpenChange={() =&gt; {}}&gt;
        &lt;DialogContent className=&quot;max-w-4xl max-h-[55vh] overflow-hidden p-0&quot;&gt;
          &lt;div className=&quot;relative w-full h-64 md:h-80 bg-gradient-to-b from-black/70 to-background overflow-hidden&quot;&gt;
            &lt;div 
              className=&quot;absolute inset-0 bg-cover bg-center blur-sm opacity-50&quot;
              style={{ backgroundImage: `url(${mockMovieData.POSTER_URL})` }}
            /&gt;
            &lt;div className=&quot;absolute inset-0 bg-black/40 flex p-6&quot;&gt;
              &lt;div className=&quot;flex flex-col md:flex-row gap-6 z-10 w-full&quot;&gt;
                &lt;div className=&quot;hidden md:block flex-shrink-0 w-40 h-auto shadow-lg rounded-md overflow-hidden&quot;&gt;
                  &lt;img 
                    src={mockMovieData.POSTER_URL} 
                    alt={mockMovieData.TITRE} 
                    className=&quot;w-full h-full object-cover&quot;
                  /&gt;
                &lt;/div&gt;
                &lt;div className=&quot;flex flex-col justify-end text-white space-y-2 flex-grow&quot;&gt;
                  &lt;h1 className=&quot;text-2xl md:text-3xl font-bold&quot;&gt;{mockMovieData.TITRE}&lt;/h1&gt;
                  &lt;div className=&quot;flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-white/80&quot;&gt;
                    &lt;div className=&quot;flex items-center&quot;&gt;
                      &lt;Calendar className=&quot;w-4 h-4 mr-1&quot; /&gt;
                      &lt;span&gt;{mockMovieData.ANNEE}&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;flex items-center&quot;&gt;
                      &lt;Clock className=&quot;w-4 h-4 mr-1&quot; /&gt;
                      &lt;span&gt;{mockMovieData.DUREE} min&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;flex items-center&quot;&gt;
                      &lt;Globe className=&quot;w-4 h-4 mr-1&quot; /&gt;
                      &lt;span&gt;{mockMovieData.LANGUE}&lt;/span&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div className=&quot;flex gap-2 mt-4&quot;&gt;
                    &lt;Button 
                      onClick={handleWatchTrailer} 
                      className=&quot;bg-primary hover:bg-primary/90&quot;
                    &gt;
                      &lt;Play className=&quot;w-4 h-4 mr-2&quot; /&gt;
                      Watch Trailer
                    &lt;/Button&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;Tabs defaultValue=&quot;overview&quot; className=&quot;w-full&quot;&gt;
            &lt;div className=&quot;px-6 pt-4&quot;&gt;
              &lt;TabsList className=&quot;text-white md:w-auto md:inline-grid&quot;&gt;
                &lt;TabsTrigger value=&quot;overview&quot;&gt;Overview&lt;/TabsTrigger&gt;
              &lt;/TabsList&gt;
            &lt;/div&gt;
            &lt;div className=&quot;relative h-[calc(90vh-80px-16rem)] md:h-[calc(90vh-80px-12rem)]&quot;&gt;
              &lt;ScrollArea className=&quot;h-full pb-6&quot;&gt;
                &lt;TabsContent value=&quot;overview&quot; className=&quot;px-6 py-4 mt-0&quot;&gt;
                  &lt;div className=&quot;space-y-6&quot;&gt;
                    &lt;div&gt;
                      &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Synopsis&lt;/h3&gt;
                      &lt;p className=&quot;text-muted-foreground&quot;&gt;
                        {mockMovieData.RESUME || 
                          &quot;No synopsis available for this movie.&quot;}
                      &lt;/p&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/TabsContent&gt;
                &lt;TabsContent value=&quot;details&quot; className=&quot;px-6 py-4 mt-0&quot;&gt;
                  &lt;div className=&quot;p-8 gap-6&quot;&gt;
                    &lt;div className=&quot;space-y-4&quot;&gt;
                      &lt;h3 className=&quot;text-lg font-semibold&quot;&gt;Technical Details&lt;/h3&gt;
                      &lt;div className=&quot;space-y-2&quot;&gt;
                        &lt;div className=&quot;flex justify-between&quot;&gt;
                          &lt;span className=&quot;text-muted-foreground&quot;&gt;Release Year&lt;/span&gt;
                          &lt;span&gt;{mockMovieData.ANNEE}&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;div className=&quot;flex justify-between&quot;&gt;
                          &lt;span className=&quot;text-muted-foreground&quot;&gt;Runtime&lt;/span&gt;
                          &lt;span&gt;{mockMovieData.DUREE} minutes&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;div className=&quot;flex justify-between&quot;&gt;
                          &lt;span className=&quot;text-muted-foreground&quot;&gt;Language&lt;/span&gt;
                          &lt;span&gt;{mockMovieData.LANGUE}&lt;/span&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/TabsContent&gt;
              &lt;/ScrollArea&gt;
            &lt;/div&gt;
          &lt;/Tabs&gt;
        &lt;/DialogContent&gt;
      &lt;/Dialog&gt;
    &lt;/div&gt;
  );
};

export default TestPage;</file><file path="src/components/UserProfile.tsx">import { Card, CardContent, CardHeader, CardTitle } from &quot;../components/ui/card.tsx&quot;;
import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;../components/ui/tabs&quot;;
import { useProfileStore } from &apos;../../hooks/use-profile-store&apos;;
import Header from &quot;./Header&quot;;
import { 
  User as UserIcon, 
  Mail, 
  CreditCard, 
  Phone, 
  MapPin, 
  Calendar,
  Package
} from &apos;lucide-react&apos;;

const ProfilePage = () =&gt; {
  const { user } = useProfileStore();

  if (!user) {
    return (
      &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;
        &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;Loading profile...&lt;/p&gt;
      &lt;/div&gt;
    );
  }

  return (
    &lt;div className=&quot;bg-background min-h-screen w-screen&quot;&gt;
      &lt;Header title=&quot;Profile&quot;/&gt;
      &lt;div className=&quot;container mx-auto px-4 py-8 pt-24&quot;&gt;
        &lt;Tabs defaultValue=&quot;personal&quot; className=&quot;max-w-4xl mx-auto&quot;&gt;
          &lt;TabsList className=&quot;grid w-full grid-cols-2&quot;&gt;
            &lt;TabsTrigger className=&quot;bg-gray-200&quot; value=&quot;personal&quot;&gt;Personal Information&lt;/TabsTrigger&gt;
            &lt;TabsTrigger className=&quot;bg-gray-200&quot; value=&quot;subscription&quot;&gt;Subscription &amp; Credits&lt;/TabsTrigger&gt;
          &lt;/TabsList&gt;
          
          &lt;TabsContent value=&quot;personal&quot;&gt;
            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;text-2xl font-bold flex items-center gap-2&quot;&gt;
                  &lt;UserIcon className=&quot;w-6 h-6&quot; /&gt;
                  Personal Information
                &lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent className=&quot;space-y-6&quot;&gt;
                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
                  &lt;div className=&quot;space-y-2&quot;&gt;
                    &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Full Name&lt;/label&gt;
                    &lt;p className=&quot;text-lg font-medium&quot;&gt;{`${user.prenom} ${user.nom_famille}`}&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;div className=&quot;space-y-2&quot;&gt;
                    &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Email&lt;/label&gt;
                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;
                      &lt;Mail className=&quot;w-4 h-4 text-primary&quot; /&gt;
                      &lt;p className=&quot;text-lg&quot;&gt;{user.courriel}&lt;/p&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  {user.tel &amp;&amp; (
                    &lt;div className=&quot;space-y-2&quot;&gt;
                      &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Phone&lt;/label&gt;
                      &lt;div className=&quot;flex items-center gap-2&quot;&gt;
                        &lt;Phone className=&quot;w-4 h-4 text-primary&quot; /&gt;
                        &lt;p className=&quot;text-lg&quot;&gt;{user.tel}&lt;/p&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  )}
                  {user.date_anniversaire &amp;&amp; (
                    &lt;div className=&quot;space-y-2&quot;&gt;
                      &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Birthday&lt;/label&gt;
                      &lt;div className=&quot;flex items-center gap-2&quot;&gt;
                        &lt;Calendar className=&quot;w-4 h-4 text-primary&quot; /&gt;
                        &lt;p className=&quot;text-lg&quot;&gt;
                          {new Date(user.date_anniversaire).toLocaleDateString()}
                        &lt;/p&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  )}
                &lt;/div&gt;

                {(user.adresse || user.ville || user.province || user.code_postal) &amp;&amp; (
                  &lt;div className=&quot;pt-6 border-t&quot;&gt;
                    &lt;h3 className=&quot;text-lg font-semibold mb-4 flex items-center gap-2&quot;&gt;
                      &lt;MapPin className=&quot;w-5 h-5&quot; /&gt;
                      Address Information
                    &lt;/h3&gt;
                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
                      {user.adresse &amp;&amp; (
                        &lt;div className=&quot;space-y-2&quot;&gt;
                          &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Street Address&lt;/label&gt;
                          &lt;p className=&quot;text-lg&quot;&gt;{user.adresse}&lt;/p&gt;
                        &lt;/div&gt;
                      )}
                      {user.ville &amp;&amp; (
                        &lt;div className=&quot;space-y-2&quot;&gt;
                          &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;City&lt;/label&gt;
                          &lt;p className=&quot;text-lg&quot;&gt;{user.ville}&lt;/p&gt;
                        &lt;/div&gt;
                      )}
                      {user.province &amp;&amp; (
                        &lt;div className=&quot;space-y-2&quot;&gt;
                          &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Province&lt;/label&gt;
                          &lt;p className=&quot;text-lg&quot;&gt;{user.province}&lt;/p&gt;
                        &lt;/div&gt;
                      )}
                      {user.code_postal &amp;&amp; (
                        &lt;div className=&quot;space-y-2&quot;&gt;
                          &lt;label className=&quot;text-sm font-medium text-muted-foreground&quot;&gt;Postal Code&lt;/label&gt;
                          &lt;p className=&quot;text-lg&quot;&gt;{user.code_postal}&lt;/p&gt;
                        &lt;/div&gt;
                      )}
                    &lt;/div&gt;
                  &lt;/div&gt;
                )}
              &lt;/CardContent&gt;
            &lt;/Card&gt;
          &lt;/TabsContent&gt;

          &lt;TabsContent value=&quot;subscription&quot;&gt;
            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;text-2xl font-bold flex items-center gap-2&quot;&gt;
                  &lt;Package className=&quot;w-6 h-6&quot; /&gt;
                  Subscription Details
                &lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent className=&quot;space-y-6&quot;&gt;
                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
                  {user.forfait &amp;&amp; (
                    &lt;div className=&quot;p-6 bg-primary/5 rounded-lg&quot;&gt;
                      &lt;h3 className=&quot;text-lg font-semibold mb-2 flex items-center gap-2&quot;&gt;
                        &lt;Package className=&quot;w-5 h-5 text-primary&quot; /&gt;
                        Current Plan
                      &lt;/h3&gt;
                      &lt;p className=&quot;text-3xl font-bold text-primary&quot;&gt;
                        {user.forfait === &apos;A&apos; ? &apos;Premium&apos; : 
                         user.forfait === &apos;B&apos; ? &apos;Standard&apos; : 
                         user.forfait === &apos;C&apos; ? &apos;Basic&apos; : &apos;Free&apos;}
                      &lt;/p&gt;
                    &lt;/div&gt;
                  )}
                  
                  &lt;div className=&quot;p-6 bg-primary/5 rounded-lg&quot;&gt;
                    &lt;h3 className=&quot;text-lg font-semibold mb-2 flex items-center gap-2&quot;&gt;
                      &lt;CreditCard className=&quot;w-5 h-5 text-primary&quot; /&gt;
                      Available Credits
                    &lt;/h3&gt;
                    &lt;p className=&quot;text-3xl font-bold text-primary&quot;&gt;
                      {user.credits || 0} credits
                    &lt;/p&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;
          &lt;/TabsContent&gt;
        &lt;/Tabs&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default ProfilePage;</file><file path="src/lib/utils.ts">import { clsx, type ClassValue } from &quot;clsx&quot;
import { twMerge } from &quot;tailwind-merge&quot;

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}</file><file path="src/Modal/movie-details-modal.tsx">import {
  Dialog,
  DialogContent,
} from &quot;../components/ui/dialog&quot;;
import { ScrollArea } from &quot;../components/ui/scroll-area&quot;;
import { Button } from &quot;../components/ui/button&quot;;
import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;../components/ui/tabs&quot;;
import {
  Clock,
  Calendar,
  Globe,
  Play,
  ShoppingCart,
  MapPin
} from &quot;lucide-react&quot;;
import { useModal } from &quot;../../hooks/use-modal-store&quot;;
import { Movie } from &quot;../../types&quot;;
import { Badge } from &quot;../components/ui/badge&quot;;
import { useNavigate } from &quot;react-router-dom&quot;;
import axios from &quot;axios&quot;;
import { useProfileStore } from &quot;../../hooks/use-profile-store&quot;;

const MovieDetailsModal = () =&gt; {
  const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;
  const { isOpen, onClose, type, data } = useModal();
  const isModalOpen = isOpen &amp;&amp; type === &quot;movieModal&quot;;
  const navigate = useNavigate();
  const { updateUserCredits } = useProfileStore();

  
  const movie: Movie | null = data;
  console.log(&quot;Movie details:&quot;, movie);

  if (!isModalOpen || !movie) return null;

  const handleWatchTrailer = () =&gt; {
    if (movie.ANNONCES &amp;&amp; movie.ANNONCES.length &gt; 0) {
      window.open(movie.ANNONCES[0], &apos;_blank&apos;);
    } else {
      console.log(&apos;No trailer available for:&apos;, movie.TITRE);
    }
  };

  const handleRentMovie = async () =&gt; {
    try {
      const token = localStorage.getItem(&quot;authToken&quot;);
      const response = await axios.post(
        `${BACKEND_URL}/users/rent/${movie.ID}`, 
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      updateUserCredits(response.data.credits);

      console.log(&quot;Movie rented:&quot;, response);
      navigate(&quot;/profile&quot;);
    } catch (error: any) {
      console.error(error);
    }
  };

  return (
    &lt;Dialog open={isModalOpen} onOpenChange={onClose}&gt;
      &lt;DialogContent className=&quot;max-w-4xl max-h-[65vh] overflow-hidden p-0&quot;&gt;
        &lt;div className=&quot;relative w-full h-64 md:h-80 bg-gradient-to-b from-black/70 to-background overflow-hidden&quot;&gt;
          &lt;div 
            className=&quot;absolute inset-0 bg-cover bg-center blur-sm opacity-50&quot;
            style={{ backgroundImage: `url(${movie.POSTER_URL})` }}
          /&gt;
          &lt;div className=&quot;absolute inset-0 bg-black/40 flex p-6&quot;&gt;
            &lt;div className=&quot;flex flex-col md:flex-row gap-6 z-10 w-full&quot;&gt;
              &lt;div className=&quot;hidden md:block flex-shrink-0 w-40 h-auto shadow-lg rounded-md overflow-hidden&quot;&gt;
                &lt;img 
                  src={movie.POSTER_URL} 
                  alt={movie.TITRE} 
                  className=&quot;w-full h-full object-cover&quot;
                /&gt;
              &lt;/div&gt;

              &lt;div className=&quot;flex flex-col justify-end text-white space-y-2 flex-grow&quot;&gt;
                &lt;h1 className=&quot;text-2xl md:text-3xl font-bold&quot;&gt;{movie.TITRE}&lt;/h1&gt;
                
                &lt;div className=&quot;flex flex-wrap gap-2 mt-1&quot;&gt;
                  {movie.GENRES &amp;&amp; movie.GENRES.map((genre, index) =&gt; (
                    &lt;Badge key={index} variant=&quot;secondary&quot; className=&quot;bg-primary/20 text-primary-foreground&quot;&gt;
                      {genre}
                    &lt;/Badge&gt;
                  ))}
                &lt;/div&gt;
                
                &lt;div className=&quot;flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-white/80 mt-2&quot;&gt;
                  &lt;div className=&quot;flex items-center&quot;&gt;
                    &lt;Calendar className=&quot;w-4 h-4 mr-1&quot; /&gt;
                    &lt;span&gt;{movie.ANNEE}&lt;/span&gt;
                  &lt;/div&gt;
                  &lt;div className=&quot;flex items-center&quot;&gt;
                    &lt;Clock className=&quot;w-4 h-4 mr-1&quot; /&gt;
                    &lt;span&gt;{movie.DUREE} min&lt;/span&gt;
                  &lt;/div&gt;
                  {movie.LANGUE &amp;&amp; (
                    &lt;div className=&quot;flex items-center&quot;&gt;
                      &lt;Globe className=&quot;w-4 h-4 mr-1&quot; /&gt;
                      &lt;span&gt;{movie.LANGUE}&lt;/span&gt;
                    &lt;/div&gt;
                  )}
                  {movie.PAYS &amp;&amp; movie.PAYS.length &gt; 0 &amp;&amp; (
                    &lt;div className=&quot;flex items-center&quot;&gt;
                      &lt;MapPin className=&quot;w-4 h-4 mr-1&quot; /&gt;
                      &lt;span&gt;{movie.PAYS.join(&apos;, &apos;)}&lt;/span&gt;
                    &lt;/div&gt;
                  )}
                &lt;/div&gt;
                
                &lt;div className=&quot;flex flex-wrap gap-2 mt-4&quot;&gt;
                  &lt;Button 
                    onClick={handleWatchTrailer} 
                    className=&quot;bg-primary hover:bg-primary/90&quot;
                    disabled={!movie.ANNONCES || movie.ANNONCES.length === 0}
                  &gt;
                    &lt;Play className=&quot;w-4 h-4 mr-2&quot; /&gt;
                    Watch Trailer
                  &lt;/Button&gt;
                  
                  &lt;Button 
                    onClick={handleRentMovie} 
                    className=&quot;bg-green-600 hover:bg-green-700&quot;
                  &gt;
                    &lt;ShoppingCart className=&quot;w-4 h-4 mr-2&quot; /&gt;
                    Rent Movie
                  &lt;/Button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;Tabs defaultValue=&quot;overview&quot; className=&quot;w-full&quot;&gt;
          &lt;div className=&quot;px-6 pt-4&quot;&gt;
            &lt;TabsList className=&quot;grid grid-cols-2 md:w-auto md:inline-grid&quot;&gt;
              &lt;TabsTrigger className=&quot;bg-gray-200&quot; value=&quot;overview&quot;&gt;Overview&lt;/TabsTrigger&gt;
              &lt;TabsTrigger className=&quot;bg-gray-200&quot; value=&quot;details&quot;&gt;Details&lt;/TabsTrigger&gt;
            &lt;/TabsList&gt;
          &lt;/div&gt;

          &lt;div className=&quot;relative h-[calc(90vh-80px-16rem)] md:h-[calc(90vh-80px-12rem)]&quot;&gt;
            &lt;ScrollArea className=&quot;h-full pb-6&quot;&gt;
              &lt;TabsContent value=&quot;overview&quot; className=&quot;px-6 py-4 mt-0&quot;&gt;
                &lt;div className=&quot;space-y-6&quot;&gt;
                  &lt;div&gt;
                    &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Synopsis&lt;/h3&gt;
                    &lt;p className=&quot;text-muted-foreground&quot;&gt;
                      {movie.RESUME || 
                        &quot;No synopsis available for this movie.&quot;}
                    &lt;/p&gt;
                  &lt;/div&gt;
                  
                  &lt;div&gt;
                    &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Genres&lt;/h3&gt;
                    &lt;div className=&quot;flex flex-wrap gap-2 overflow-y-auto max-h-48 pr-2&quot;&gt;
                      {movie.GENRES &amp;&amp; movie.GENRES.map((genre, index) =&gt; (
                        &lt;Badge key={index} variant=&quot;outline&quot;&gt;
                          {genre}
                        &lt;/Badge&gt;
                      ))}
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/TabsContent&gt;

              &lt;TabsContent value=&quot;details&quot; className=&quot;px-6 py-4 mt-0&quot;&gt;
                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
                  &lt;div className=&quot;space-y-4&quot;&gt;
                    &lt;h3 className=&quot;text-lg font-semibold&quot;&gt;Technical Details&lt;/h3&gt;
                    &lt;div className=&quot;space-y-2&quot;&gt;
                      &lt;div className=&quot;flex justify-between&quot;&gt;
                        &lt;span className=&quot;text-muted-foreground&quot;&gt;Release Year&lt;/span&gt;
                        &lt;span&gt;{movie.ANNEE}&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;div className=&quot;flex justify-between&quot;&gt;
                        &lt;span className=&quot;text-muted-foreground&quot;&gt;Runtime&lt;/span&gt;
                        &lt;span&gt;{movie.DUREE} minutes&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;div className=&quot;flex justify-between&quot;&gt;
                        &lt;span className=&quot;text-muted-foreground&quot;&gt;Language&lt;/span&gt;
                        &lt;span&gt;{movie.LANGUE}&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;div className=&quot;flex justify-between&quot;&gt;
                        &lt;span className=&quot;text-muted-foreground&quot;&gt;Country&lt;/span&gt;
                        &lt;span&gt;{movie.PAYS ? movie.PAYS.join(&apos;, &apos;) : &apos;Unknown&apos;}&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;div className=&quot;flex justify-between&quot;&gt;
                        &lt;span className=&quot;text-muted-foreground&quot;&gt;Movie ID&lt;/span&gt;
                        &lt;span&gt;{movie.ID}&lt;/span&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  
                  &lt;div className=&quot;space-y-4&quot;&gt;
                    &lt;h3 className=&quot;text-lg font-semibold&quot;&gt;Trailer&lt;/h3&gt;
                    {movie.ANNONCES &amp;&amp; movie.ANNONCES.length &gt; 0 ? (
                      &lt;div className=&quot;space-y-2&quot;&gt;
                        &lt;Button 
                          variant=&quot;outline&quot; 
                          className=&quot;w-full&quot;
                          onClick={handleWatchTrailer}
                        &gt;
                          &lt;Play className=&quot;w-4 h-4 mr-2&quot; /&gt;
                          Watch Trailer
                        &lt;/Button&gt;
                      &lt;/div&gt;
                    ) : (
                      &lt;p className=&quot;text-muted-foreground&quot;&gt;No trailer available for this movie.&lt;/p&gt;
                    )}
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/TabsContent&gt;
            &lt;/ScrollArea&gt;
          &lt;/div&gt;
        &lt;/Tabs&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
};

export default MovieDetailsModal;</file><file path="src/Modal/movie-information-modal.tsx">//import React, { useEffect } from &quot;react&quot;;
//import {
//  Dialog,
//  DialogContent,
//  DialogHeader,
//  DialogTitle,
//  DialogDescription,
//} from &quot;../components/ui/dialog&quot;;
//import { ScrollArea } from &quot;../components/ui/scroll-area&quot;;
//import { Clock, Calendar, Globe } from &quot;lucide-react&quot;;
//import { useModal } from &quot;../../hooks/use-modal-store&quot;
//
//const MovieModal = () =&gt; {
//
//  const { isOpen, onClose, type, data: movie } = useModal();
//  const isModalOpen = isOpen &amp;&amp; type === &quot;movieModal&quot;;
//
//  if (!isModalOpen) return null;
//
//
//  return (
//    &lt;Dialog open={isModalOpen} onOpenChange={onClose}&gt;
//      &lt;DialogContent className=&quot;max-w-3xl max-h-[90vh] overflow-hidden&quot;&gt;
//        &lt;DialogHeader&gt;
//          &lt;DialogTitle className=&quot;text-2xl font-bold&quot;&gt;
//            {movie.TITRE}
//          &lt;/DialogTitle&gt;
//          &lt;DialogDescription&gt;
//            &lt;div className=&quot;flex items-center gap-2 text-gray-500&quot;&gt;
//              &lt;Calendar className=&quot;w-4 h-4&quot; /&gt;
//              &lt;span&gt;{movie.ANNEE}&lt;/span&gt;
//              &lt;Clock className=&quot;w-4 h-4 ml-4&quot; /&gt;
//              &lt;span&gt;{movie.DUREE} min&lt;/span&gt;
//              &lt;Globe className=&quot;w-4 h-4 ml-4&quot; /&gt;
//              &lt;span&gt;{movie.LANGUE}&lt;/span&gt;
//            &lt;/div&gt;
//          &lt;/DialogDescription&gt;
//        &lt;/DialogHeader&gt;
//
//        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
//          &lt;div className=&quot;relative aspect-[2/3] rounded-lg overflow-hidden bg-gray-100&quot;&gt;
//            {movie.POSTER_URL ? (
//              &lt;img 
//                src={movie.POSTER_URL} 
//                alt={movie.TITRE}
//                className=&quot;object-cover w-full h-full&quot;
//              /&gt;
//            ) : (
//              &lt;div className=&quot;flex items-center justify-center w-full h-full text-gray-400&quot;&gt;
//                No poster available
//              &lt;/div&gt;
//            )}
//          &lt;/div&gt;
//
//          &lt;ScrollArea className=&quot;h-[60vh]&quot;&gt;
//            &lt;div className=&quot;space-y-6 pr-4&quot;&gt;
//              &lt;div&gt;
//                &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Synopsis&lt;/h3&gt;
//                &lt;p className=&quot;text-gray-600&quot;&gt;
//                  {movie.RESUME || &quot;No synopsis available.&quot;}
//                &lt;/p&gt;
//              &lt;/div&gt;
//
//              &lt;div&gt;
//                &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Additional Details&lt;/h3&gt;
//                &lt;dl className=&quot;space-y-2&quot;&gt;
//                  &lt;div&gt;
//                    &lt;dt className=&quot;text-sm font-medium text-gray-500&quot;&gt;Director ID&lt;/dt&gt;
//                    &lt;dd className=&quot;text-gray-700&quot;&gt;{movie.ID_REALISATEUR || &quot;Not available&quot;}&lt;/dd&gt;
//                  &lt;/div&gt;
//                  &lt;div&gt;
//                    &lt;dt className=&quot;text-sm font-medium text-gray-500&quot;&gt;Movie ID&lt;/dt&gt;
//                    &lt;dd className=&quot;text-gray-700&quot;&gt;{movie.ID}&lt;/dd&gt;
//                  &lt;/div&gt;
//                &lt;/dl&gt;
//              &lt;/div&gt;
//            &lt;/div&gt;
//          &lt;/ScrollArea&gt;
//        &lt;/div&gt;
//      &lt;/DialogContent&gt;
//    &lt;/Dialog&gt;
//  );
//};
//
//export default MovieModal;</file><file path="src/Modal/sign-in-modal.tsx">import { useState } from &quot;react&quot;;
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from &quot;../components/ui/dialog&quot;;
import { Button } from &quot;../components/ui/button&quot;;
import { Input } from &quot;../components/ui/input&quot;;
import { Label } from &quot;../components/ui/label&quot;;
import { EyeIcon, EyeOffIcon } from &quot;lucide-react&quot;;

type userData = {
  courriel: string;
  mot_de_passe: string;
};

interface SignInModalProps {
  isOpen: boolean;
  onClose: () =&gt; void;
  onSignIn: (formData: userData) =&gt; void;
  error: string;
}

const SignInModal = ({
  isOpen,
  onClose,
  onSignIn,
  error,
}: SignInModalProps) =&gt; {
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState&lt;userData&gt;({
    courriel: &quot;&quot;,
    mot_de_passe: &quot;&quot;,
  });

  const handleSubmit = (e: React.FormEvent) =&gt; {
    e.preventDefault();

    onSignIn(formData);
  };

  return (
    &lt;Dialog open={isOpen} onOpenChange={onClose}&gt;
      &lt;DialogContent className=&quot;sm:max-w-[425px] [&amp;&gt;button]:hover:bg-transparent [&amp;&gt;button]:focus:bg-transparent [&amp;&gt;button]:active:bg-transparent&quot;&gt;
        &lt;DialogHeader&gt;
          &lt;DialogTitle className=&quot;text-2xl font-bold text-center&quot;&gt;
            Connexion
          &lt;/DialogTitle&gt;
          &lt;DialogDescription className=&quot;text-center text-muted-foreground&quot;&gt;
            Connectez vous a votre profil pour accéder au service
          &lt;/DialogDescription&gt;
        &lt;/DialogHeader&gt;
        &lt;form onSubmit={handleSubmit}&gt;
          &lt;div className=&quot;grid gap-6 py-4&quot;&gt;
            &lt;div className=&quot;grid gap-2&quot;&gt;
              &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;
              &lt;Input
                id=&quot;email&quot;
                type=&quot;email&quot;
                placeholder=&quot;exemple@courriel.com&quot;
                value={formData.courriel}
                onChange={(e) =&gt;
                  setFormData({ ...formData, courriel: e.target.value })
                }
              /&gt;
            &lt;/div&gt;
            &lt;div className=&quot;grid gap-2&quot;&gt;
              &lt;Label htmlFor=&quot;password&quot;&gt;Mot de passe&lt;/Label&gt;
              &lt;div className=&quot;relative&quot;&gt;
                &lt;Input
                  id=&quot;password&quot;
                  type={showPassword ? &quot;text&quot; : &quot;password&quot;}
                  placeholder=&quot;Mot de passe&quot;
                  value={formData.mot_de_passe}
                  onChange={(e) =&gt;
                    setFormData({ ...formData, mot_de_passe: e.target.value })
                  }
                /&gt;
                &lt;Button
                  type=&quot;button&quot;
                  variant=&quot;ghost&quot;
                  size=&quot;icon&quot;
                  className=&quot;absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent&quot;
                  onClick={() =&gt; setShowPassword(!showPassword)}
                &gt;
                  {showPassword ? (
                    &lt;EyeOffIcon className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;
                  ) : (
                    &lt;EyeIcon className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;
                  )}
                &lt;/Button&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          {error &amp;&amp; (
            &lt;div className=&quot;text-red-500 text-sm text-center mt-2 p-2&quot;&gt;{error}&lt;/div&gt;
          )}
          &lt;DialogFooter&gt;
            &lt;div className=&quot;py-2 w-full&quot;&gt;
              &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;
                Connexion
              &lt;/Button&gt;
            &lt;/div&gt;
          &lt;/DialogFooter&gt;
        &lt;/form&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
};

export default SignInModal;</file><file path="src/Modal/user-profile-modal.tsx">import { useState } from &quot;react&quot;;
import tomHankImage from &quot;../../assets/tom-hanks.jpg&quot;;
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from &quot;../components/ui/dialog&quot;;

const UserProfile = () =&gt; {
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const openDialog = () =&gt; setIsDialogOpen(true);
  const closeDialog = () =&gt; setIsDialogOpen(false);

  return (
    &lt;div className=&quot;w-screen h-screen flex justify-center items-center&quot;&gt;
      &lt;button onClick={openDialog} className=&quot;bg-blue-500 p-2 rounded text-white&quot;&gt;
        Open Profile
      &lt;/button&gt;
      {isDialogOpen &amp;&amp; (
        &lt;Dialog onClose={closeDialog}&gt;
          &lt;DialogContent&gt;
            &lt;DialogHeader&gt;
              &lt;DialogTitle&gt;User Profile&lt;/DialogTitle&gt;
            &lt;/DialogHeader&gt;
            &lt;DialogContent&gt;
              &lt;img src={tomHankImage} alt=&quot;Tom Hanks&quot; className=&quot;w-full h-auto rounded mb-4&quot; /&gt;
              &lt;DialogDescription&gt;
                &lt;p&gt;Name: Tom Hanks&lt;/p&gt;
                &lt;p&gt;Email: tom.hanks@example.com&lt;/p&gt;
              &lt;/DialogDescription&gt;
            &lt;/DialogContent&gt;
            &lt;DialogFooter&gt;
              &lt;button onClick={closeDialog} className=&quot;bg-red-500 p-2 rounded text-white&quot;&gt;
                Close
              &lt;/button&gt;
            &lt;/DialogFooter&gt;
          &lt;/DialogContent&gt;
        &lt;/Dialog&gt;
      )}
    &lt;/div&gt;
  );
};

export default UserProfile;</file><file path="src/App.css">.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}</file><file path="src/App.tsx">import &quot;./App.css&quot;;
import { BrowserRouter as Router, Route, Routes } from &quot;react-router-dom&quot;;
import LandingPage from &quot;./components/LandingPage&quot;;
import TestPage from &quot;./components/TestPage&quot;;
import Dashboard from &quot;./components/Dashboard&quot;;
import UserProfilePage from &quot;./components/UserProfile&quot;;
import ModalProvider from &quot;./components/ModalProvider&quot;;

function App() {
  return (
    &lt;Router&gt;
      &lt;div className=&quot;min-h-screen bg-background&quot;&gt;
        &lt;ModalProvider /&gt;
        &lt;Routes&gt;
          &lt;Route path=&quot;/&quot; element={&lt;LandingPage /&gt;} /&gt;
          &lt;Route path=&quot;/test&quot; element={&lt;TestPage /&gt;} /&gt;
          &lt;Route path=&quot;/Dashboard&quot; element={&lt;Dashboard /&gt;} /&gt;
          &lt;Route path=&quot;/profile&quot; element={&lt;UserProfilePage /&gt;} /&gt;
        &lt;/Routes&gt;
      &lt;/div&gt;
    &lt;/Router&gt;
  );
}

export default App;</file><file path="src/index.css">@tailwind base;
@tailwind components;
@tailwind utilities;

html, body, root {
  padding: 0;
  margin: 0;
}

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
  padding: 0;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}</file><file path="src/main.tsx">import { StrictMode } from &apos;react&apos;
import { createRoot } from &apos;react-dom/client&apos;
import &apos;./index.css&apos;
import App from &apos;./App.tsx&apos;

createRoot(document.getElementById(&apos;root&apos;)!).render(
  &lt;StrictMode&gt;
    &lt;App /&gt;
  &lt;/StrictMode&gt;,
)</file><file path="src/vite-env.d.ts">/// &lt;reference types=&quot;vite/client&quot; /&gt;</file><file path=".gitignore"># Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?</file><file path="components.json">{
  &quot;$schema&quot;: &quot;https://ui.shadcn.com/schema.json&quot;,
  &quot;style&quot;: &quot;default&quot;,
  &quot;rsc&quot;: false,
  &quot;tsx&quot;: true,
  &quot;tailwind&quot;: {
    &quot;config&quot;: &quot;tailwind.config.js&quot;,
    &quot;css&quot;: &quot;src/index.css&quot;,
    &quot;baseColor&quot;: &quot;neutral&quot;,
    &quot;cssVariables&quot;: true,
    &quot;prefix&quot;: &quot;&quot;
  },
  &quot;aliases&quot;: {
    &quot;components&quot;: &quot;@/components&quot;,
    &quot;utils&quot;: &quot;@/lib/utils&quot;,
    &quot;ui&quot;: &quot;@/components/ui&quot;,
    &quot;lib&quot;: &quot;@/lib&quot;,
    &quot;hooks&quot;: &quot;@/hooks&quot;
  },
  &quot;iconLibrary&quot;: &quot;lucide&quot;
}</file><file path="eslint.config.js">import js from &apos;@eslint/js&apos;
import globals from &apos;globals&apos;
import reactHooks from &apos;eslint-plugin-react-hooks&apos;
import reactRefresh from &apos;eslint-plugin-react-refresh&apos;
import tseslint from &apos;typescript-eslint&apos;

export default tseslint.config(
  { ignores: [&apos;dist&apos;] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: [&apos;**/*.{ts,tsx}&apos;],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      &apos;react-hooks&apos;: reactHooks,
      &apos;react-refresh&apos;: reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      &apos;react-refresh/only-export-components&apos;: [
        &apos;warn&apos;,
        { allowConstantExport: true },
      ],
    },
  },
)</file><file path="index.html">&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Vite + React + TS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</file><file path="package.json">{
  &quot;name&quot;: &quot;gti660&quot;,
  &quot;private&quot;: true,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vite&quot;,
    &quot;build&quot;: &quot;tsc -b &amp;&amp; vite build&quot;,
    &quot;lint&quot;: &quot;eslint .&quot;,
    &quot;preview&quot;: &quot;vite preview&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@fortawesome/free-solid-svg-icons&quot;: &quot;^6.7.2&quot;,
    &quot;@fortawesome/react-fontawesome&quot;: &quot;^0.2.2&quot;,
    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.6&quot;,
    &quot;@radix-ui/react-label&quot;: &quot;^2.1.2&quot;,
    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.3&quot;,
    &quot;@radix-ui/react-slider&quot;: &quot;^1.2.3&quot;,
    &quot;@radix-ui/react-slot&quot;: &quot;^1.1.1&quot;,
    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.3&quot;,
    &quot;axios&quot;: &quot;^1.7.9&quot;,
    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,
    &quot;clsx&quot;: &quot;^2.1.1&quot;,
    &quot;crypto-js&quot;: &quot;^4.2.0&quot;,
    &quot;cryptojs&quot;: &quot;^2.5.3&quot;,
    &quot;loadash&quot;: &quot;^1.0.0&quot;,
    &quot;lodash&quot;: &quot;^4.17.21&quot;,
    &quot;lucide-react&quot;: &quot;^0.474.0&quot;,
    &quot;md5&quot;: &quot;^2.3.0&quot;,
    &quot;react&quot;: &quot;^18.3.1&quot;,
    &quot;react-dom&quot;: &quot;^18.3.1&quot;,
    &quot;react-router-dom&quot;: &quot;^7.1.5&quot;,
    &quot;tailwind-merge&quot;: &quot;^3.0.1&quot;,
    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,
    &quot;zod&quot;: &quot;^3.24.1&quot;,
    &quot;zustand&quot;: &quot;^5.0.3&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@eslint/js&quot;: &quot;^9.17.0&quot;,
    &quot;@types/lodash&quot;: &quot;^4.17.15&quot;,
    &quot;@types/md5&quot;: &quot;^2.3.5&quot;,
    &quot;@types/node&quot;: &quot;^22.13.1&quot;,
    &quot;@types/react&quot;: &quot;^18.3.18&quot;,
    &quot;@types/react-dom&quot;: &quot;^18.3.5&quot;,
    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.4&quot;,
    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,
    &quot;eslint&quot;: &quot;^9.17.0&quot;,
    &quot;eslint-plugin-react-hooks&quot;: &quot;^5.0.0&quot;,
    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.16&quot;,
    &quot;globals&quot;: &quot;^15.14.0&quot;,
    &quot;postcss&quot;: &quot;^8.5.1&quot;,
    &quot;tailwindcss&quot;: &quot;3&quot;,
    &quot;typescript&quot;: &quot;~5.6.2&quot;,
    &quot;typescript-eslint&quot;: &quot;^8.18.2&quot;,
    &quot;vite&quot;: &quot;^6.0.5&quot;
  }
}</file><file path="postcss.config.js">export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}</file><file path="README.md"># React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: [&apos;./tsconfig.node.json&apos;, &apos;./tsconfig.app.json&apos;],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from &apos;eslint-plugin-react&apos;

export default tseslint.config({
  // Set the react version
  settings: { react: { version: &apos;18.3&apos; } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs[&apos;jsx-runtime&apos;].rules,
  },
})
```</file><file path="tailwind.config.js">/** @type {import(&apos;tailwindcss&apos;).Config} */
export default {
    darkMode: [&quot;class&quot;],
    content: [&quot;./index.html&quot;, &quot;./src/**/*.{ts,tsx,js,jsx}&quot;],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: &apos;var(--radius)&apos;,
  			md: &apos;calc(var(--radius) - 2px)&apos;,
  			sm: &apos;calc(var(--radius) - 4px)&apos;
  		},
  		colors: {
  			background: &apos;hsl(var(--background))&apos;,
  			foreground: &apos;hsl(var(--foreground))&apos;,
  			card: {
  				DEFAULT: &apos;hsl(var(--card))&apos;,
  				foreground: &apos;hsl(var(--card-foreground))&apos;
  			},
  			popover: {
  				DEFAULT: &apos;hsl(var(--popover))&apos;,
  				foreground: &apos;hsl(var(--popover-foreground))&apos;
  			},
  			primary: {
  				DEFAULT: &apos;hsl(var(--primary))&apos;,
  				foreground: &apos;hsl(var(--primary-foreground))&apos;
  			},
  			secondary: {
  				DEFAULT: &apos;hsl(var(--secondary))&apos;,
  				foreground: &apos;hsl(var(--secondary-foreground))&apos;
  			},
  			muted: {
  				DEFAULT: &apos;hsl(var(--muted))&apos;,
  				foreground: &apos;hsl(var(--muted-foreground))&apos;
  			},
  			accent: {
  				DEFAULT: &apos;hsl(var(--accent))&apos;,
  				foreground: &apos;hsl(var(--accent-foreground))&apos;
  			},
  			destructive: {
  				DEFAULT: &apos;hsl(var(--destructive))&apos;,
  				foreground: &apos;hsl(var(--destructive-foreground))&apos;
  			},
  			border: &apos;hsl(var(--border))&apos;,
  			input: &apos;hsl(var(--input))&apos;,
  			ring: &apos;hsl(var(--ring))&apos;,
  			chart: {
  				&apos;1&apos;: &apos;hsl(var(--chart-1))&apos;,
  				&apos;2&apos;: &apos;hsl(var(--chart-2))&apos;,
  				&apos;3&apos;: &apos;hsl(var(--chart-3))&apos;,
  				&apos;4&apos;: &apos;hsl(var(--chart-4))&apos;,
  				&apos;5&apos;: &apos;hsl(var(--chart-5))&apos;
  			}
  		}
  	}
  },
  plugins: [require(&quot;tailwindcss-animate&quot;)],
}</file><file path="tsconfig.app.json">{
  &quot;compilerOptions&quot;: {
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.app.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2020&quot;,
    &quot;useDefineForClassFields&quot;: true,
    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,
    &quot;jsx&quot;: &quot;react-jsx&quot;,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;src&quot;]
}</file><file path="tsconfig.json">{
  &quot;files&quot;: [],
  &quot;references&quot;: [
    { &quot;path&quot;: &quot;./tsconfig.app.json&quot; },
    { &quot;path&quot;: &quot;./tsconfig.node.json&quot; }
  ],
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
  }
}</file><file path="tsconfig.node.json">{
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    },
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.node.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2022&quot;,
    &quot;lib&quot;: [&quot;ES2023&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;vite.config.ts&quot;]
}</file><file path="types.ts">export type User = {
  name: string;
  email: string;
  nom_famille: string;
  prenom: string;
  courriel: string;
  tel?: string;
  date_anniversaire?: Date;
  adresse?: string;
  ville?: string;
  province?: string;
  code_postal?: string;
  forfait?: string;
  credits?: number;
};

export type MovieSuggestion = {
  ID: number;
  TITRE: string;
  ANNEE: number;
  DUREE: number;
  POSTER_URL: string;
};

export type Movie = {
  ID: number;
  TITRE: string;
  RESUME: string;
  ANNEE: number;
  DUREE: number;
  LANGUE: string;
  ID_REALISATEUR: number;
  POSTER_URL: string;
  ACTEURS: Array&lt;Actor&gt;;
  ANNONCES: Array&lt;string&gt;;
  GENRES: Array&lt;string&gt;;
  PAYS: Array&lt;string&gt;;
  SCENARISTES: Array&lt;string&gt;;
};

export type Actor = {
  id: number;
  nom: string;
  role?: string;
};

export type PersonSuggestion = {
  id: number;
  name: string;
};</file><file path="vite.config.ts">import path from &quot;path&quot;
import react from &quot;@vitejs/plugin-react&quot;
import { defineConfig } from &quot;vite&quot;

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      &quot;@&quot;: path.resolve(__dirname, &quot;./src&quot;),
    },
  },
})</file></files></repomix>